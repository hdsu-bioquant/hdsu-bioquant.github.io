graphviz.plot(net1)
net1.fit = bn.fit(net1,data=data)
net1.fit
## computing the BIC score of the network
bnlearn::score(net1,data)
net1 = set.arc(net,'B' ,'A')
net1 = set.arc(net1,'C' ,'B')
graphviz.plot(net1)
net1.fit = bn.fit(net1,data=data)
net1.fit
## computing the BIC score of the network
bnlearn::score(net1,data)
net1 = set.arc(net,'B' ,'A')
net1 = set.arc(net1,'B' ,'C')
graphviz.plot(net1)
net1.fit = bn.fit(net1,data=data)
net1.fit
## computing the BIC score of the network
bnlearn::score(net1,data)
## computing the BIC score of the network
bnlearn::score(net1,data)
sachs = read.table('https://www.dropbox.com/s/fcq3cqxheklr2it/sachs.data.txt?dl=1',header=TRUE)
head(sachs)
tmp = melt(sachs)
p = ggplot(tmp,aes(x=value, fill=variable, color=variable)) +
geom_density(alpha=0.30,size=0.7) + theme_bw() +
facet_wrap(~variable, scales = "free") + labs(x="log2(value)")+
theme(legend.title = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
rm(tmp)
p
## discretize the data
dsachs = discretize(sachs,method='hartemink',breaks = 3, ibreaks = 60, idisc = 'quantile')
head(dsachs)
tmp=melt(dsachs,id.vars=c())
p = ggplot(tmp,aes(x=value, fill=variable, color=variable)) +
geom_bar() + theme_bw() +
facet_wrap(~variable, scales = "free") + labs(x="Categories")+
theme(legend.title = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
p
boot = boot.strength(data=dsachs, R=500,
algorithm='hc',
algorithm.args = list(score='bde')
)
head(boot)
## now threshold the edge strength and the direction evidence
boot.filt = boot[(boot$strength > 0.6 & boot$direction >= 0.5),]
boot.filt
avg.boot = averaged.network(boot, threshold = 0.7)
net = avg.boot$arcs
net = graph_from_edgelist(net,directed=T)
library(Rgraphviz)
graphviz.plot(avg.boot)
isachs = read.table('https://www.dropbox.com/s/xegmoa1e04opc0t/sachs.interventional.txt?dl=1', header = TRUE, colClasses = "factor")
head(isachs)
isachs
isachs %>% filter(INT==1)
isachs %>% filter(INT==2)
isachs %>% filter(INT==8)
isachs %>% filter(INT=='8')
isachs %>% filter(INT=='2')
class(isachs)
isachs %>% filter(INT==8)
isachs$INT
isachs %>% filter(INT=='0')
dim(isachs)
isachs %>% filter(INT==2)
INT
INT=NULL
rm(INT)
isachs = read.table('https://www.dropbox.com/s/xegmoa1e04opc0t/sachs.interventional.txt?dl=1', header = TRUE, colClasses = "factor")
head(isachs)
isachs %>% filter(INT==2)
isachs
colnames(isachs)
isachs %>% dplyr::filter(INT==2)
isachs %>% dplyr::filter(INT==8)
isachs %>% dplyr::filter(INT==2)
INT = sapply(1:11, function(x) { which(isachs$INT == x) })
isachs2 = isachs[, 1:11]
nodes = names(isachs2)
names(INT) = nodes
## we start from a set of 200 random graphs
start = random.graph(nodes = nodes,
method = "melancon", # algorithm to generate random graphs
num = 200,   # number of initial random graphs
burn.in = 10^5,
every = 100)
netlist = lapply(start, function(net) {
tabu(isachs2,
score = "mbde", # method to score the network
exp = INT,      # information of the interventions
iss = 1,
start = net,    # starting point (i.e. random graph)
tabu = 50) }
)
arcs = custom.strength(netlist, nodes = nodes, cpdag = FALSE)
bn.mbde = averaged.network(arcs, threshold = 0.85)
net = bn.mbde$arcs
net = graph_from_edgelist(net,directed=T)
graphviz.plot(bn.mbde)
dat = read.table('https://www.dropbox.com/s/npb177z5ceod4fw/CEMT_26-nonCGI-allDataContinuous.txt?dl=1',
header = TRUE, stringsAsFactors = FALSE, sep="\t")
head(dat)
dim(dat)
dat[,3:ncol(dat)] = round(dat[,3:ncol(dat)]/dat$Input,3)
dat = dat[,-ncol(dat)]
corVals = round(cor(dat, method="spearman"),2)
knitr::kable(corVals, caption = "Pairwise correlation values")
corrplot.mixed(corVals, tl.col = "black", tl.cex=0.8)
corrplot(corVals, order = "hclust", hclust.method = "ward.D2", addrect = 2, tl.col = "black")
summary(dat)
log2dat = log2(dat+0.1)
tmp = melt(log2dat)
p = ggplot(tmp,aes(x=value, fill=variable, color=variable)) +
geom_density(alpha=0.30,size=0.7) + theme_bw() +
facet_wrap(~variable, scales = "free") + labs(x="log2(value)")+
theme(legend.title = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
rm(tmp)
p
res = Ckmeans.1d.dp(log2dat$H3K4me3)
# Number of clusters predicted
max(res$cluster)
# Lets look at the predictions
plot(log2dat$H3K4me3, col= res$cluster, cex=0.5, pch=20, xlab="Genes", ylab= "H3K4me3 signal")
#abline(h=res$centers, lwd=2,lty=2,col="blue")
rm(res)
# Compute optimal states for all
states = apply(log2dat, 2, function(y){max(Ckmeans.1d.dp(x=y, k=c(1,9))$cluster)})
install.packages("RGraphviz")
ci.test('A','C',data=data,test='mi')
ci.test('A','C','B',data=data,test='mi')
version
ci.test('B','A',data=data,test='mi')
ci.test('B','A','C',data=data,test='mi')
?install.packages
data
dim(data)
ci.test('A','C',data=data,test='mi')
ci.test('A','C','B',data=data,test='mi')
ci.test('A','C',data=data,test='mi')
ci.test('A','C','B',data=data,test='mi')
ci.test('B','C',data=data,test='mi')
ci.test('B','C','A',data=data,test='mi')
ci.test('B','A',data=data,test='mi')
ci.test('B','A','C',data=data,test='mi')
net = iamb(data)
graphviz.plot(net)
net1 = set.arc(net,'B' ,'A')
net1 = set.arc(net1,'B' ,'C')
graphviz.plot(net1)
net1.fit = bn.fit(net1,data=data)
net1.fit
## computing the BIC score of the network
bnlearn::score(net1,data)
net1 = set.arc(net,'A' ,'B')
net1 = set.arc(net1,'B' ,'C')
graphviz.plot(net1)
net1.fit = bn.fit(net1,data=data)
net1.fit
## computing the BIC score of the network
bnlearn::score(net1,data)
net1 = set.arc(net,'A' ,'B')
net1 = set.arc(net1,'C' ,'B')
graphviz.plot(net1)
net1.fit = bn.fit(net1,data=data)
net1.fit
## computing the BIC score of the network
bnlearn::score(net1,data)
sachs = read.table('https://www.dropbox.com/s/fcq3cqxheklr2it/sachs.data.txt?dl=1',header=TRUE)
head(sachs)
sachs
View(sachs)
tmp = melt(sachs)
p = ggplot(tmp,aes(x=value, fill=variable, color=variable)) +
geom_density(alpha=0.30,size=0.7) + theme_bw() +
facet_wrap(~variable, scales = "free") + labs(x="log2(value)")+
theme(legend.title = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
rm(tmp)
p
## discretize the data
dsachs = discretize(sachs,method='hartemink',breaks = 3, ibreaks = 60, idisc = 'quantile')
head(dsachs)
dsachs$Raf
levels(dsachs$Raf)
?boot.strength
isachs
isachs %>% dplyr::filter(INT=='2')
?tabu
?custom.strength
start
graphviz.plot(start[[1]])
graphviz.plot(start[[2]])
graphviz.plot(start[[3]])
graphviz.plot(start[[4]])
sachs$Raf
sachs$Raf > 50
dsachs$Raf
levels(dsachs$Raf)
levels(dsachs$Mek)
tmp=melt(dsachs,id.vars=c())
p = ggplot(tmp,aes(x=value, fill=variable, color=variable)) +
geom_bar() + theme_bw() +
facet_wrap(~variable, scales = "free") + labs(x="Categories")+
theme(legend.title = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
p
tmp=melt(dsachs,id.vars=c())
p = ggplot(tmp,aes(x=value, fill=variable, color=variable)) +
geom_bar() + theme_bw() +
facet_wrap(~variable, scales = "free") + labs(x="Categories")+
theme(legend.title = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
p
dsachs
boot = boot.strength(data=dsachs, R=500,
algorithm='hc',
algorithm.args = list(score='bde')
)
head(boot)
View(boot)
?boot.strength
boot.filt = boot[(boot$strength > 0.6 & boot$direction >= 0.5),]
boot.filt
avg.boot = averaged.network(boot, threshold = 0.7)
net = avg.boot$arcs
net = graph_from_edgelist(net,directed=T)
library(Rgraphviz)
graphviz.plot(avg.boot)
View(isachs)
boot.filt = boot[(boot$strength > 0.7 & boot$direction >= 0.5),]
boot.filt
dat = read.table('https://www.dropbox.com/s/npb177z5ceod4fw/CEMT_26-nonCGI-allDataContinuous.txt?dl=1',
header = TRUE, stringsAsFactors = FALSE, sep="\t")
head(dat)
dim(dat)
dat[,3:ncol(dat)] = round(dat[,3:ncol(dat)]/dat$Input,3)
dat = dat[,-ncol(dat)]
corVals = round(cor(dat, method="spearman"),2)
knitr::kable(corVals, caption = "Pairwise correlation values")
corrplot.mixed(corVals, tl.col = "black", tl.cex=0.8)
corrplot(corVals, order = "hclust", hclust.method = "ward.D2", addrect = 2, tl.col = "black")
summary(dat)
log2dat = log2(dat+0.1)
tmp = melt(log2dat)
p = ggplot(tmp,aes(x=value, fill=variable, color=variable)) +
geom_density(alpha=0.30,size=0.7) + theme_bw() +
facet_wrap(~variable, scales = "free") + labs(x="log2(value)")+
theme(legend.title = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
rm(tmp)
p
res = Ckmeans.1d.dp(log2dat$H3K4me3)
# Number of clusters predicted
max(res$cluster)
# Lets look at the predictions
plot(log2dat$H3K4me3, col= res$cluster, cex=0.5, pch=20, xlab="Genes", ylab= "H3K4me3 signal")
#abline(h=res$centers, lwd=2,lty=2,col="blue")
rm(res)
# Compute optimal states for all
states = apply(log2dat, 2, function(y){max(Ckmeans.1d.dp(x=y, k=c(1,9))$cluster)})
states
res = Ckmeans.1d.dp(log2dat$CPGfrac, k=states[1])
plot(log2dat$CPGfrac, col= res$cluster, cex=0.5, pch=20, xlab="Genes", ylab= "CPGfrac")
res = Ckmeans.1d.dp(log2dat$CPGfrac, k=3)
plot(log2dat$CPGfrac, col= res$cluster, cex=0.5, pch=20, xlab="Genes", ylab= "CPGfrac")
states[1] = 3
states
# Creating the discretized version of the data
disDat = matrix(ncol=ncol(log2dat), nrow=nrow(log2dat))
colnames(disDat) = colnames(log2dat)
rownames(disDat) = rownames(log2dat)
disDat = as.data.frame(disDat)
for( i in 1: length(states))
{
tmp = suppressWarnings(Ckmeans.1d.dp(log2dat[,i], k=c(1,states[i])))
disDat[,i] = factor(tmp$cluster)
rm(tmp)
}
# Final view of the discretized data
summary(disDat)
# Plot the discretized data
tmp=melt(disDat,id.vars=c())
p = ggplot(tmp,aes(x=value, fill=variable, color=variable)) +
geom_bar() + theme_bw() +
facet_wrap(~variable, scales = "free") + labs(x="Categories")+
theme(legend.title = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
p
graphviz.plot(start[[1]])
graphviz.plot(start[[2]])
graphviz.plot(start[[3]])
## we start from a set of 200 random graphs
start = random.graph(nodes = nodes,
method = "melancon", # algorithm to generate random graphs
num = 200,   # number of initial random graphs
burn.in = 10^5,
every = 100)
netlist = lapply(start, function(net) {
tabu(isachs2,
score = "mbde", # method to score the network
exp = INT,      # information of the interventions
iss = 1,
start = net,    # starting point (i.e. random graph)
tabu = 50) }
)
arcs = custom.strength(netlist, nodes = nodes, cpdag = FALSE)
bn.mbde = averaged.network(arcs, threshold = 0.85)
net = bn.mbde$arcs
net = graph_from_edgelist(net,directed=T)
graphviz.plot(bn.mbde)
graphviz.plot(bn.mbde)
dat = read.table('https://www.dropbox.com/s/npb177z5ceod4fw/CEMT_26-nonCGI-allDataContinuous.txt?dl=1',
header = TRUE, stringsAsFactors = FALSE, sep="\t")
head(dat)
dim(dat)
dat[,3:ncol(dat)] = round(dat[,3:ncol(dat)]/dat$Input,3)
dat = dat[,-ncol(dat)]
corVals = round(cor(dat, method="spearman"),2)
knitr::kable(corVals, caption = "Pairwise correlation values")
View(dat)
summary(dat)
log2dat = log2(dat+0.1)
tmp = melt(log2dat)
p = ggplot(tmp,aes(x=value, fill=variable, color=variable)) +
geom_density(alpha=0.30,size=0.7) + theme_bw() +
facet_wrap(~variable, scales = "free") + labs(x="log2(value)")+
theme(legend.title = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
rm(tmp)
p
res = Ckmeans.1d.dp(log2dat$H3K4me3)
# Number of clusters predicted
max(res$cluster)
# Compute optimal states for all
states = apply(log2dat, 2, function(y){max(Ckmeans.1d.dp(x=y, k=c(1,9))$cluster)})
states
res = Ckmeans.1d.dp(log2dat$CPGfrac, k=states[1])
plot(log2dat$CPGfrac, col= res$cluster, cex=0.5, pch=20, xlab="Genes", ylab= "CPGfrac")
res = Ckmeans.1d.dp(log2dat$CPGfrac, k=3)
plot(log2dat$CPGfrac, col= res$cluster, cex=0.5, pch=20, xlab="Genes", ylab= "CPGfrac")
states[1] = 3
states
# Creating the discretized version of the data
disDat = matrix(ncol=ncol(log2dat), nrow=nrow(log2dat))
colnames(disDat) = colnames(log2dat)
rownames(disDat) = rownames(log2dat)
disDat = as.data.frame(disDat)
for( i in 1: length(states))
{
tmp = suppressWarnings(Ckmeans.1d.dp(log2dat[,i], k=c(1,states[i])))
disDat[,i] = factor(tmp$cluster)
rm(tmp)
}
# Final view of the discretized data
summary(disDat)
# Plot the discretized data
tmp=melt(disDat,id.vars=c())
p = ggplot(tmp,aes(x=value, fill=variable, color=variable)) +
geom_bar() + theme_bw() +
facet_wrap(~variable, scales = "free") + labs(x="Categories")+
theme(legend.title = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
p
# Black list .. no interaction should originate from gene expression
bl=data.frame(from="RPKM",to=colnames(disDat))
bl=bl[-which(bl$to == "RPKM"),]
bl
# Learn bayesian network via bootstrapping
strength = boot.strength(disDat,
algorithm="tabu",
algorithm.args=list(score="aic", tabu=10, blacklist=bl),
R=1000) # takes about 2mins
head(strength)
View(strength)
# Select only those interactions meeting our filteration criteria
selarcs = strength[strength$direction > 0.5 ,]
selarcs = selarcs[order(selarcs$strength,decreasing=TRUE),]
selarcs
# Get an averaged network
dag.average.filt = averaged.network(selarcs, threshold = 0.90)
knitr::kable(dag.average.filt$arcs, caption = "Interactions meeting our threshold for strength and direction")
# Compute correlations for the selected interactions
net = dag.average.filt$arcs
corVals = apply(net,1, function(x){
a = log2dat[,x[1]]
b = log2dat[,x[2]]
c = round(cor(a,b,method="spearman"),2)
return(c)
})
# Coloring the correlation values
col = rep("forestgreen",nrow(net))
col[which(corVals < 0)] = "firebrick"
# Setting up the network in igraph
net = graph_from_edgelist(net,directed=T)
E(net)$weight = corVals
V(net)$label.color="black"
rm(corVals)
#plot(net, edge.color=col, vertex.shape="none", edge.width=E(net)$weight*3.5)
#Identify vertex coordinates
l=layout_in_circle(net,order=c("H3K4me1", "H3K4me3", "RPKM", "H3K27ac", "H3K36me3", "H3K27me3", "CPGfrac", "H3K9me3"))
pos.grp <- which(V(net)$name %in% c("H3K4me1", "H3K4me3", "RPKM", "H3K27ac", "H3K36me3"))
neg.grp <- which(V(net)$name %in% c("H3K27me3", "CPGfrac", "H3K9me3"))
#Vertex color
V(net)$label.color[pos.grp]="#1f78b4"
V(net)$label.color[neg.grp]="#fdae61"
V(net)$label.font=2
# Vertex positioning
left.grp  <- which(V(net)$name %in% c("H3K4me1", "H3K4me3",  "H3K9me3"))
right.grp <- which(V(net)$name %in% c("H3K27me3", "H3K27ac","H3K36me3"))
mid.grp   <- which(V(net)$name %in% c("RPKM", "CPGfrac"))
V(net)$label.dist = rep(NA,length(V(net)))
V(net)$label.degree = rep(NA,length(V(net)))
V(net)$label.dist[left.grp]=1.5
V(net)$label.degree[left.grp]=0
V(net)$label.dist[right.grp]=-1.5
V(net)$label.degree[right.grp]=0
V(net)$label.dist[mid.grp]= c(-0.3,0.3)
V(net)$label.degree[mid.grp]= -pi/2
plot(net, edge.color=col, vertex.shape="circle", vertex.size = 40,layout=l, edge.width=E(net)$weight*3.5+3)
box()
# Fitting the learnt network to the data to obtain
# conditional probability tables
fitted = bn.fit(dag.average.filt, disDat)
fitted
# Predict Expression level by setting DNAme to high/low
x.high = as.numeric(table(cpdist(fitted,nodes=c('RPKM'),CPGfrac=='3')))
x.low = as.numeric(table(cpdist(fitted,nodes=c('RPKM'),CPGfrac=='1')))
pred = data.frame(prop=c(x.high/sum(x.high),x.low/sum(x.low)),
condition=c(rep('DNAme high',length(x.high)),
rep('DNAme low',length(x.high))),
Expression=c(1:length(x.high),1:length(x.low))
)
ggplot(pred,aes(x=Expression,fill=condition,y=prop)) + geom_bar(stat='identity',position=position_dodge())
plot(net, edge.color=col, vertex.shape="circle", vertex.size = 20,layout=l, edge.width=E(net)$weight*3.5+3)
box()
plot(net, edge.color=col, vertex.shape="circle", vertex.size = 20,layout=l, edge.width=E(net)$weight*3.5+3)
# Predict Expression level by setting H3K4me1 to high/low
x.high = as.numeric(table(cpdist(fitted,nodes=c('RPKM'),H3K4me1=='3')))
x.low = as.numeric(table(cpdist(fitted,nodes=c('RPKM'),H3K4me1=='1')))
pred = data.frame(prop=c(x.high/sum(x.high),x.low/sum(x.low)),
condition=c(rep('K4me1 high',length(x.high)),rep('K4me1 low',length(x.high))),
Expression=c(1:length(x.high),1:length(x.low))
)
ggplot(pred,aes(x=Expression,fill=condition,y=prop)) + geom_bar(stat='identity',position=position_dodge())
# Predict Expression level by setting H3K4me1 to high/low
x.high = as.numeric(table(cpdist(fitted,nodes=c('RPKM'),H3K27me3=='3')))
x.low = as.numeric(table(cpdist(fitted,nodes=c('RPKM'),H3K27me3=='1')))
pred = data.frame(prop=c(x.high/sum(x.high),x.low/sum(x.low)),
condition=c(rep('K27me3 high',length(x.high)),rep('K27me3 low',length(x.high))),
Expression=c(1:length(x.high),1:length(x.low))
)
ggplot(pred,aes(x=Expression,fill=condition,y=prop)) + geom_bar(stat='identity',position=position_dodge())
knitr::opts_chunk$set(echo = TRUE,cache=TRUE)
library(HMM)
library(lattice)
corpus = readChar('https://www.dropbox.com/s/plwknlglf29qjv2/ceasar.txt?dl=1',100000)
corpus = gsub('[\n\r]*','',corpus)
a = unlist(strsplit(gsub("[^a-z]", "_", tolower (corpus)), ""))
letter.labels=c("_", letters)
knitr::opts_chunk$set(echo = TRUE,cache=TRUE)
library(HMM)
library(lattice)
corpus = readChar('https://www.dropbox.com/s/plwknlglf29qjv2/ceasar.txt?dl=1',100000)
corpus = gsub('[\n\r]*','',corpus)
a = unlist(strsplit(gsub("[^a-z]", "_", tolower (corpus)), ""))
letter.labels=c("_", letters)
substr(corpus,1,1000)
head(a,n=10)
table(a)
par(las=2);barplot(sort(table(a)),horiz=TRUE)
prob = function(x) {x/sum(x)}
n = 2
set.seed(123)
# initialize emission
B0 = apply(matrix(runif(n*27), n), 1, prob)
# initialize transition
A0 = apply(matrix(runif(n^2), n), 1, prob)
B0;A0
hmm0 = initHMM(paste0("State ",1:n), letter.labels, startProbs=(prob(runif(n))),
transProbs=A0,
emissionProbs=B0
)
nit = 200
hmm = baumWelch(hmm0, a,nit)
setwd('/Users/carlherrmann/Dropbox/00_MBP_Carl/Teaching/WS2122/Bioinfo1/Demo/hmm')
save(hmm,file='HMM2.Rdata')
n=2
load(file=paste0('HMM',n,'.Rdata'))
col=c('red','lightgreen','lightblue')
## Plot the learned emission parameters
par(mfrow=c(2,1),mar=c(2,2,2,2),cex=.7);barplot(t(B0)[,-1],beside=TRUE,names=letter.labels[-1],main='Initial',
col=col[1:n]);barplot(hmm$hmm$emissionProbs[,-1],beside=TRUE,main='Final',col=col[1:n]);legend('topright',legend=paste0('State ',1:n),fill=col[1:n])
hmm$hmm$transProbs
